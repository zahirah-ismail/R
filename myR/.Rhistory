which (x > 5)
x > 5
x[which(x == min(x)]
x[which(x == min(x))]
x [which ((x>7) | (x<2))
x
x [which ((x>7) | (x<2))]
int.vec <- c(1:6)
class(int.vec)
int.vec
as.numeric(int.vec)
as.numeric(int.vec) -> int.vec
class(int.vec)
as.character(int:vec)
as.character(int.vec)
vec1 <- c("f", 2)
class(vec)
class(vec1)
a <- c(1:6)
b <- c(5:10)
1 %in% a
10 % a
10 %in% a
a %in% b
is.element(a,b)
sample(a)
sample(a)
sample(a)
sample(a)
set.seed(10)
sample(a)
sample(a)
sample(a)
sample(a)
set.seed(10)
sample(a)
sample(a)
sample(a, replace =T)
c <- sample(a,40, replace = T)
c
d <- sort(c)
d
sort(c, decreasing = T)
rev(sort(c))
g <- c[order(c)]
g
a <- 2
b <-10
c <- c(1:4)
any(c > b)
any (c > a)
if(a < b){
print ("i like mangos")
}
if(a > b){
print ("i like mangos")
}else{
print("its shows else")
}
ifelse(a>b , print ("i like mangos"),print("its shows else"))
ifelse(a>b , println ("i like mangos"), println("its shows else"))
for(i in seq(1,20,2)){
if(i%%2 ==0){
print(i)
}
}
for(i in seq(2,20,2)){
if(i%%2 ==0){
print(i)
}
}
for(i in seq(2,20,2)){
if(i%%2 ==0){
print(i)
}
if(i > 10){
break
}
}
for(i in seq(2,20,2)){
if(i > 10){
break
}
if(i%%2 ==0){
print(i)
}
}
a <- c(1,2,3,4,NA)
b <- c(5,6,7,NA,8)
c <- c(9,10,NA,11,12)
d <- c(13,NA,14,15,16)
e <- (17,18,19,20,21)
a <- c(1,2,3,4,NA)
b <- c(5,6,7,NA,8)
c <- c(9,10,NA,11,12)
d <- c(13,NA,14,15,16)
e <- c(17,18,19,20,21)
class(a)
y <- data.frame(a,b,c,d,e)
y
stack(y) -> y1
y1
unstack(y1)
cy <- cbind(y,y,y,y,y)
cy
cy2 <- rbind(y,y,y,y,y)
cy2
class(ry)
class(cy2)
fix(cy2)
fix(cy2)
q()
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
class(a)
y <- data.frame(a,b,c,d,e)
y
stack(y) -> y1
y1
unstack(y1)
cy <- cbind(y,y,y,y,y)
cy
cy2 <- rbind(y,y,y,y,y)
cy2
class(ry)
class(cy2)
fix(cy2)
ryt <- t(cy2)
fix(ryt)
fix(ryt)
class(ryt)
as.data.frame(ryt) -> ryt
class(ryt)
head(ryt)
head(ry)
head(ry, 20)
head (cy2, 20)
na.omit(cy2)
cy2[1,]
ry[c(2:20),]
cy2[c(2:20),]
cy2[!is.na(ry$a),]
cy2[!is.na(cy2$a),]
!is.na(cy2$a)
cy2[which(cy2$a >1),]
cy2[which(cy2$a >1 & cy2[,2] < 7),]
attach(cy2)
q()
set.seed(100)
rpois(100,6)
set.seed(100)
range(rpois(100,6))
set.seed(100)
range(rpois(100,6))
range(rpois(100,6)[1)
range(rpois(100,6))[1]
range(rpois(100,6))[1] : range(rpois(100,6))[2]
set.seed(100)
cut(rpois(100,6) , range(rpois(100,6)) [1] :range(rpois (100,6))[2])
cut(rpois(100,6), pretty(rpois(100,6)))
pretty(rpois(100,6)
pretty(rpois(1000,50),15)
pretty (rpois(100,6))
q()
USArrests
table(USArrests(,3))
table(USArrests[,3])
table (cut(USArrests[,3],pretty(USArrests[,3])))
table (cut(USArrests[,3],pretty(USArrests[,3] , 4)))
table(USArrests[,3], USArrests[,2]
table(USArrests[,3], USArrests[,2])
table(USArrests[,3],USArrests[,2])
airquality
table(airquality[,4] ,airquality[,5])
table(cut(airquality[,4], pretty(airquality[,4])),airquality[,5])
table(cut(airquality[,4], pretty(airquality[,4])),airquality[,5]) -> a
prop.table(a)
prop.table(a,1)
prop.table(a,2)
setwd("C:/Users/zahirah/documents/myR")
getwd()
read.csv("exported_pipe.csv") -> a
read.csv("exported pipe.csv") -> a
read.csv("exported pipe.txt") -> a
a
class(a)
write.csv(a ,"export file.csv")
read.table("exported pipe.txt") -> b
b
read.table("exported pipe.txt", fill = T, header = F) -> b
b
prop.table(a,1)
read.table("exported pipe.txt", fill = T, header = F,colClasses = c("character","character","character","character","character"))
read.table("exported pipe.txt", fill = T, header = F,colClasses = c("character","character","character","character")
read.table("exported pipe.txt", fill = T, header = F,colClasses = c("character","character","character","character"))
read.table("exported pipe.txt", fill = T, header = F,colClasses = c("character", "character", "character", "character")) -> s
library(datasets)
library(help = datasets)
?USArrets
?USArrests
fix(USAarrests)
fix(USArrests)
summary(USArrests)
fivenum(USArrests)
fivenum(USArrests)
str(USArrests)
colnames(USArrests)
rownames(USArrests)
colnames(USArrests) <- c("Murders", "Assaults", "UrbanPopulation", "Rapes")
colnames(USArrests)
fix(USArrests)
nrow(USArrests)
ncol(USArrests)
USArrests[1,1]
head(USArrests)
tail(USArrests)
USArrests[,c[1,2]]
USArrests[,c(1,2)]
USArrests[,c[1,2]]
USA[,c(1,2)]
USArrests[,c(1,2)]
q()
library (MASS)
library (ISLR)
## Simple linear reagression
names(Boston)
?Boston
names(fit1)
confint(fit1)
?Boston
plot(medv~lstat,Boston)
fit1 = lm (medv~lstat,data=Boston)
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval ="confidence")
### Multiple linear regression
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boaton)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lim(medv~lstat +I(lstat^2),boston); summary(fit6)
fit6=lm(medv~lstat +I(lstat^2),boston); summary(fit6)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
par(mfrow=c(1,1))
points(lstat,fitted(fit6),col="red" , pch=20)
par(mfrow=c(1,1))
plot(medv~lstat)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
### Qualitative predictors
fix(Carseats)
names(Carseats)
summary(carseats)
summary(Carseats)
### Qualitative predictors
fix(Carseats)
names(Carseats)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$Shelveloc)
contrasts(Carseats$ShelveLoc)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
##Writing R functions
regplot=function(x,y){
fit=lm(x~y)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplotfunction(x,y,...){
fit=lm(x~y)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price" , ylab="Sales", col="blue",pch=20)
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(x~y)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price" , ylab="Sales", col="blue",pch=20)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
### Qualitative predictors
fix(Carseats)
names(Carseats)
summary(Carseats)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
##Writing R functions
regplot=function(x,y){
fit=lm(x~y)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(x~y)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price" , ylab="Sales", col="blue",pch=20)
?library (MASS)
?library (ISLR)
?library (MASS)
?library (ISLR)
data()
names(Titanic)
?Titanic
names(Cars)
names(cars)
plot(speed,dist)
plot(speed~dist, data=cars)
summary(cars)
fitcars=(speed~dist, data=cars)
fitcars=lm(speed~dist, data=cars)
summary(cars)
abline(fitcars,col="green")
fix(cars)
abline(fitcars,col="green")
predicy(fitcar,dataframe(dist=c(23)), interval="confidence")
predict(fitcar,dataframe(dist=c(23)), interval="confidence")
predict(fitcars,dataframe(dist=c(23)), interval="confidence")
predict(fitcars,dataframe(dist=c(23,20,41)), interval="confidence")
predict(fitcars,data.frame(dist=c(23,20,41)), interval="confidence")
predict(fitcars,data.frame(dist=c(23)), interval="confidence")
fitcars
summary(cars)
confit(fitcars)
confint(fitcars)
predict(fitcars,data.frame(dist=c(23)), interval="confidence")
plot(summary(cars))
boxplot(speed~dist,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
source('~/R-progr/myR/cars.R')
boxplot(dist~dist*speed,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
plot(dist~dist*speed,cars)
fitcars=lm(dist~dist*speed, data=cars)
source('~/R-progr/myR/cars.R')
library(MASS)
library(ISLR)
names(cars)
fix(cars)
plot(speed~dist,cars)
fitcars=lm(speed~dist, data=cars)
fitcars
summary(cars)
boxplot(speed~dist,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
confint(fitcars)
abline(fitcars,col="green")
predict(fitcars,data.frame(dist=c(23)), interval="confidence")
installed.packages("dplyr")
library("dplyr")
install.packages("dplyr")
##install.packages("dplyr")
library("dplyr")
##install.packages("dplyr")
library("dplyr")
##install.packages("dplyr")
library("dplyr")
names(cars)
fix(cars)
plot(speed~dist,cars)
fitcars=lm(speed~dist, data=cars)
fitcars
summary(cars)
boxplot(speed~dist,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
confint(fitcars)
abline(fitcars,col="green")
predict(fitcars,data.frame(dist=c(23)), interval="confidence")
my_data = cars
my_data
fix(cars)
source('~/R-progr/myR/cars.R')
source('~/R-progr/myR/cars.R')
library (MASS)
library (ISLR)
## Simple linear reagression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1 = lm (medv~lstat,data=Boston)
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval ="confidence")
?Boston
plot(medv~lstat,Boston)
fit1 = lm (medv~lstat,data=Boston)
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval ="confidence")
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval ="confidence")
### Multiple linear regression
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
### Nonlinear terms and interactions
fit5=lm(medv~lstat*age,Boston)
library(MASS)
library(ISLR)
##install.packages("dplyr")
library("dplyr")
my_data = cars
my_data
fix(cars)
plot(speed~dist,cars)
fitcars=lm(speed~dist, data=cars)
fitcars
summary(cars)
boxplot(speed~dist,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
confint(fitcars)
abline(fitcars,col="green")
predict(fitcars,data.frame(dist=c(23)), interval="confidence")
time <- data.frame(dist/speed)
boxplot(dist~time,data=cars, main="distance vs speed in cars", xlab="Distance" ,ylab="speed")
source('~/R-progr/myR/cars.R')
source('~/R-progr/myR/cars.R')
## cross validation
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
##LOOCV - leave one out cross validation fits a model repeatedly and leaves an observation out
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d),data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d),data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
##What is the standard error of alpha
alpha.fn=function(data, index){
with(data[index,], alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample(1:100,100,replace=TRUE))
boot.out=boot(Portfolio,alpha.fn,R=1000)
boot.out
plot(boot.out)
